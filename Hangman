import java.util.*;

public class HangmanGame {
    private String hiddenWord;
    private Stack<Character> wordStack;
    private Queue<Character> guessedLetters;
    private int maxAttempts;
    private int attemptsLeft;

    public HangmanGame(String word, int maxAttempts) {
        this.hiddenWord = word.toLowerCase();
        this.wordStack = new Stack<>();
        this.guessedLetters = new LinkedList<>();
        this.maxAttempts = maxAttempts;
        this.attemptsLeft = maxAttempts;

        // Initialize the word stack with underscores for each letter in the hidden word
        for (char letter : hiddenWord.toCharArray()) {
            if (Character.isLetter(letter)) {
                wordStack.push('_');
            } else {
                wordStack.push(letter);
            }
        }
    }

    public boolean isGameWon() {
        return !wordStack.contains('_');
    }

    public boolean isGameLost() {
        return attemptsLeft <= 0;
    }

    public boolean makeGuess(char letter) {
        letter = Character.toLowerCase(letter);

        // Check if the letter has already been guessed
        if (guessedLetters.contains(letter)) {
            System.out.println("You've already guessed this letter.");
            return false;
        }

        // Add the letter to the guessed letters queue
        guessedLetters.offer(letter);

        // Check if the letter is in the hidden word
        boolean found = false;
        for (int i = 0; i < hiddenWord.length(); i++) {
            if (hiddenWord.charAt(i) == letter) {
                wordStack.set(i, letter);
                found = true;
            }
        }

        if (!found) {
            attemptsLeft--;
        }

        return found;
    }

    public void displayGameStatus() {
        System.out.println("Word: " + wordStack);
        System.out.println("Guessed Letters: " + guessedLetters);
        System.out.println("Attempts Left: " + attemptsLeft);
    }

    public static void main(String[] args) {
        String[] words = {"programming", "java", "hangman", "computer", "algorithm", "queue", "stack"};
        Random rand = new Random();
        String randomWord = words[rand.nextInt(words.length)];
        int maxAttempts = 6;

        HangmanGame game = new HangmanGame(randomWord, maxAttempts);

        Scanner scanner = new Scanner(System.in);

        while (!game.isGameWon() && !game.isGameLost()) {
            System.out.print("Enter a letter: ");
            String input = scanner.nextLine();

            if (input.length() == 1 && Character.isLetter(input.charAt(0))) {
                char letter = input.charAt(0);

                if (game.makeGuess(letter)) {
                    System.out.println("Good guess!");
                } else {
                    System.out.println("Incorrect guess.");
                }

                game.displayGameStatus();
            } else {
                System.out.println("Please enter a single letter.");
            }
        }

        if (game.isGameWon()) {
            System.out.println("Congratulations! You've won. The word was: " + game.hiddenWord);
        } else {
            System.out.println("Sorry, you've run out of attempts. The word was: " + game.hiddenWord);
        }
    }
}
